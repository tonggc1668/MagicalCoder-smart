<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
* Created by www.magicalcoder.com
* 如果你改变了此类 read 请将此行删除
* 799374340@qq.com
-->
<mapper namespace="ClassTeacherMapper">
    <!-- ClassTeacher -->
    <sql id="createTable">
    DROP TABLE `class_teacher`;
    CREATE TABLE `class_teacher` (
        PRIMARY KEY (`id`) , KEY (`id`) , UNIQUE KEY `uniq_id` (`id`) ,
        `id` bigint(20) NOT NULL  AUTO_INCREMENT  COMMENT '班级关联老师表主键' ,

        `class_id` bigint(20) COMMENT '班级表主键'  DEFAULT  '0' ,

        `teacher_id` bigint(20) COMMENT '老师表主键'  DEFAULT  '0' 
    )
    </sql>
    <sql id="selectSqlClassTeacher">
        classTeacher.id ,
        classTeacher.class_id classId,
        classTeacher.teacher_id teacherId
    </sql>

   <sql id="whereSqlClassTeacher">
        <if test="id!=null "> and classTeacher.id = #{id}</if>
        <if test="classId!=null "> and classTeacher.class_id = #{classId}</if>
        <if test="teacherId!=null "> and classTeacher.teacher_id = #{teacherId}</if>
                <if test="classIdFirst!=null "> and classTeacher.class_id <![CDATA[=]]>
                            #{classIdFirst}
                </if>
                <if test="teacherIdFirst!=null "> and classTeacher.teacher_id <![CDATA[=]]>
                            #{teacherIdFirst}
                </if>
        <if test="whereSql!=null"> ${whereSql}</if>
    </sql>

    <insert id="insertClassTeacher" parameterType="ClassTeacher" >
        <selectKey resultType="Long" order="AFTER" keyProperty="id" >
            <choose>
                <when test="id==null">
                    SELECT LAST_INSERT_ID() AS id
                </when>
                <otherwise>SELECT #{id} as id</otherwise>
            </choose>
        </selectKey>
        insert into class_teacher (
    <if test="id!=null">`id`,</if>
            `class_id`,            `teacher_id`        )
        values(
            <if test="id!=null">#{id`},</if>
            <choose>
                <when test="classId==null">
                         '0'
                </when>
                <otherwise>#{classId}</otherwise>
            </choose>,            <choose>
                <when test="teacherId==null">
                         '0'
                </when>
                <otherwise>#{teacherId}</otherwise>
            </choose>        )
    </insert>

    <sql id="orderGroupLimit">
        <if test="groupBy != null"> group by  ${groupBy} </if>
        <if test="orderBy != null"> order by  ${orderBy} </if>
        <if test="limit != null"> LIMIT #{limitIndex},#{limit} </if>
    </sql>
    <select id="getClassTeacher" parameterType="hashmap" resultType="ClassTeacher">
        select <include refid="selectSqlClassTeacher"/> from class_teacher classTeacher where 1=1 <include refid="whereSqlClassTeacher"/> <include refid="orderGroupLimit"/>
    </select>
    <select id="getClassTeacherList" parameterType="hashmap" resultType="ClassTeacher">
        select <include refid="selectSqlClassTeacher"/> from class_teacher classTeacher where 1=1 <include refid="whereSqlClassTeacher"/> <include refid="orderGroupLimit"/>
    </select>
    <select id="getClassTeacherListCount" parameterType="hashmap" resultType="int">
        select count(1)  from class_teacher classTeacher
        where 1=1 <include refid="whereSqlClassTeacher"/> <if test="groupBy != null"> group by  ${groupBy} </if>
    </select>

    <update id="updateClassTeacher" parameterType="ClassTeacher">
        update class_teacher classTeacher set
                <choose>
                    <when test="classId!=null">classTeacher.class_id=#{classId},</when>
                    <otherwise>
                        classTeacher.class_id=0,
                    </otherwise>
                </choose>
                <choose>
                    <when test="teacherId!=null">classTeacher.teacher_id=#{teacherId},</when>
                    <otherwise>
                        classTeacher.teacher_id=0,
                    </otherwise>
                </choose>
                classTeacher.id = id
        where 1=1
            and classTeacher.id = #{id}

    </update>
    <update id="updateClassTeacherWithoutNull" parameterType="ClassTeacher">
        update class_teacher classTeacher set
                <choose>
                    <when test="classId!=null">classTeacher.class_id=#{classId},</when>
                </choose>
                <choose>
                    <when test="teacherId!=null">classTeacher.teacher_id=#{teacherId},</when>
                </choose>
            classTeacher.id = id
        where 1=1
            and classTeacher.id = #{id}

    </update>
    <update id="updateClassTeacherByWhereSql" parameterType="hashmap">
        update class_teacher classTeacher set
                <choose><when test="classId!=null">classTeacher.class_id=#{classId},</when></choose>
                <choose><when test="teacherId!=null">classTeacher.teacher_id=#{teacherId},</when></choose>
            classTeacher.id = id
        where ${whereSql}
    </update>

    <delete id="truncateClassTeacher">
        truncate table class_teacher
    </delete>

    <delete id="deleteClassTeacher" parameterType="hashmap">
        delete classTeacher from class_teacher classTeacher where 1=1
            and classTeacher.id = #{id}
    </delete>

    <delete id="deleteClassTeacherList" parameterType="hashmap">
        delete classTeacher from class_teacher classTeacher where
        <include refid="whereSqlClassTeacher"/>
    </delete>

    <delete id="deleteClassTeacherByWhereSql" parameterType="hashmap">
        delete classTeacher from class_teacher classTeacher where ${whereSql}
    </delete>

    <delete id="batchDeleteClassTeacher" parameterType="java.util.List">
        delete classTeacher from class_teacher classTeacher where classTeacher.id in
        <foreach item="id" index="index" collection="list" open="(" separator="," close=")">#{id}</foreach>
    </delete>
    <delete id="batchDeleteClassTeacherList" parameterType="java.util.List">
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            delete classTeacher from class_teacher classTeacher where
            1=1
                    and classTeacher.id = #{item.id}
        </foreach>
    </delete>

    <insert id="batchInsertClassTeacher" parameterType="java.util.List">
        insert into class_teacher (
            `class_id`,
            `teacher_id`
        )
        values
        <foreach collection="list" item= "item" index ="index" separator=",">
            (
                <choose><when test="item.classId==null">  '0'  </when><otherwise>#{item.classId}</otherwise></choose> ,
                <choose><when test="item.teacherId==null">  '0'  </when><otherwise>#{item.teacherId}</otherwise></choose> 
            )
        </foreach >
    </insert>

    <update id="batchUpdateClassTeacher"  parameterType="java.util.List">
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            update class_teacher classTeacher
            <set>
                <choose><when test="item.classId!=null">classTeacher.class_id=#{item.classId},</when></choose>
                <choose><when test="item.teacherId!=null">classTeacher.teacher_id=#{item.teacherId},</when></choose>
                    classTeacher.id = id
            </set>
            where 1=1
                and classTeacher.id = #{item.id}
        </foreach>
    </update>


<!-- 关联操作 many一方 -->
    <select id="getManyList" parameterType="hashmap" resultType="ClassTeacherMany">
        select <include refid="selectSqlMany"/> classTeacher.teacher_id teacherId
        from teacher teacher
        left join class_teacher classTeacher  on
        teacher.id = classTeacher.teacher_id
        <if test="classId != null">and classTeacher.class_id=#{classId}</if>
        where <include refid="whereSqlMany"/>
        <if test="orderBy != null"> order by  ${ orderBy } </if>
        <if test="limit != null"> LIMIT #{limitIndex},#{limit} </if>
    </select>
    <select id="getManyListCount" parameterType="hashmap" resultType="int">
        select count(1)  from teacher teacher
        where <include refid="whereSqlMany"/>
    </select>

    <sql id="selectSqlMany">
    teacher.id ,
    teacher.teacher_name teacherName,
    teacher.age ,
    </sql>

    <sql id="whereSqlMany">
        1=1
                <if test="id !=null "> and teacher.id = #{id }</if>
                <if test="teacherName !=null "> and teacher.teacher_name = #{teacherName }</if>
                <if test="age !=null "> and teacher.age = #{age }</if>
                            <if test="teacherNameFirst!=null "> and teacher.teacher_name <![CDATA[=]]>
                                        #{teacherNameFirst}
                            </if>
                            <if test="ageFirst!=null "> and teacher.age <![CDATA[=]]>
                                        #{ageFirst}
                            </if>
        <if test="whereSql!=null"> ${whereSql}</if>
    </sql>
    <!-- sql end-->
    <!-- 本文件对于研发人员 只读 不能修改 =================================================================================================================================================== -->
</mapper>
