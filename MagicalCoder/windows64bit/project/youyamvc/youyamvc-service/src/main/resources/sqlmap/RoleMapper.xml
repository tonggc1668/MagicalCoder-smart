<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
* Created by www.magicalcoder.com
* 如果你改变了此类 read 请将此行删除
* 799374340@qq.com
-->
<mapper namespace="RoleMapper">
    <!-- Role -->
    <sql id="createTable">
    DROP TABLE `role`;
    CREATE TABLE `role` (
        PRIMARY KEY (`id`) ,
        `id` bigint(20) NOT NULL  AUTO_INCREMENT  COMMENT '主键' ,

        `role_name` varchar(20) COMMENT '角色名'  DEFAULT  '' 
    )
    </sql>
    <sql id="selectSqlRole">
        role.id ,
        role.role_name roleName
    </sql>

   <sql id="whereSqlRole">
        <if test="id!=null "> and role.id = #{id}</if>
        <if test="roleName!=null "> and role.role_name = #{roleName}</if>
                <if test="roleNameFirst!=null "> and role.role_name <![CDATA[like]]>
                            concat('%',#{roleNameFirst},'%')
                </if>
        <if test="whereSql!=null"> ${whereSql}</if>
    </sql>

    <insert id="insertRole" parameterType="Role" >
        <selectKey resultType="Long" order="AFTER" keyProperty="id" >
            <choose>
                <when test="id==null">
                    SELECT LAST_INSERT_ID() AS id
                </when>
                <otherwise>SELECT #{id} as id</otherwise>
            </choose>
        </selectKey>
        insert into role (
    <if test="id!=null">`id`,</if>
            `role_name`        )
        values(
            <if test="id!=null">#{id`},</if>
            <choose>
                <when test="roleName==null">
                         ''
                </when>
                <otherwise>#{roleName}</otherwise>
            </choose>        )
    </insert>

    <sql id="orderGroupLimit">
        <if test="groupBy != null"> group by  ${groupBy} </if>
        <if test="orderBy != null"> order by  ${orderBy} </if>
        <if test="limit != null"> LIMIT #{limitIndex},#{limit} </if>
    </sql>
    <select id="getRole" parameterType="hashmap" resultType="Role">
        select <include refid="selectSqlRole"/> from role role where 1=1 <include refid="whereSqlRole"/> <include refid="orderGroupLimit"/>
    </select>
    <select id="getRoleList" parameterType="hashmap" resultType="Role">
        select <include refid="selectSqlRole"/> from role role where 1=1 <include refid="whereSqlRole"/> <include refid="orderGroupLimit"/>
    </select>
    <select id="getRoleListCount" parameterType="hashmap" resultType="int">
        select count(1)  from role role
        where 1=1 <include refid="whereSqlRole"/> <if test="groupBy != null"> group by  ${groupBy} </if>
    </select>

    <update id="updateRole" parameterType="Role">
        update role role set
                <choose>
                    <when test="roleName!=null">role.role_name=#{roleName},</when>
                    <otherwise>
                        role.role_name='',
                    </otherwise>
                </choose>
                role.id = id
        where 1=1
            and role.id = #{id}

    </update>
    <update id="updateRoleWithoutNull" parameterType="Role">
        update role role set
                <choose>
                    <when test="roleName!=null">role.role_name=#{roleName},</when>
                </choose>
            role.id = id
        where 1=1
            and role.id = #{id}

    </update>
    <update id="updateRoleByWhereSql" parameterType="hashmap">
        update role role set
                <choose><when test="roleName!=null">role.role_name=#{roleName},</when></choose>
            role.id = id
        where ${whereSql}
    </update>

    <delete id="truncateRole">
        truncate table role
    </delete>

    <delete id="deleteRole" parameterType="hashmap">
        delete role from role role where 1=1
            and role.id = #{id}
    </delete>

    <delete id="deleteRoleList" parameterType="hashmap">
        delete role from role role where
        <include refid="whereSqlRole"/>
    </delete>

    <delete id="deleteRoleByWhereSql" parameterType="hashmap">
        delete role from role role where ${whereSql}
    </delete>

    <delete id="batchDeleteRole" parameterType="java.util.List">
        delete role from role role where role.id in
        <foreach item="id" index="index" collection="list" open="(" separator="," close=")">#{id}</foreach>
    </delete>
    <delete id="batchDeleteRoleList" parameterType="java.util.List">
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            delete role from role role where
            1=1
                    and role.id = #{item.id}
        </foreach>
    </delete>

    <insert id="batchInsertRole" parameterType="java.util.List">
        insert into role (
            `role_name`
        )
        values
        <foreach collection="list" item= "item" index ="index" separator=",">
            (
                <choose><when test="item.roleName==null">  ''  </when><otherwise>#{item.roleName}</otherwise></choose> 
            )
        </foreach >
    </insert>

    <update id="batchUpdateRole"  parameterType="java.util.List">
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            update role role
            <set>
                <choose><when test="item.roleName!=null">role.role_name=#{item.roleName},</when></choose>
                    role.id = id
            </set>
            where 1=1
                and role.id = #{item.id}
        </foreach>
    </update>



    <!-- sql end-->
    <!-- 本文件对于研发人员 只读 不能修改 =================================================================================================================================================== -->
</mapper>
